name: 'Deploy to Schema Registry'
description: 'Deploy Avro schemas to Confluent Schema Registry'
inputs:
  schema-dir:
    description: 'Path to schema directory'
    required: true
    default: 'schemas'
  registry-url:
    description: 'Confluent Schema Registry URL'
    required: true
  api-key:
    description: 'Confluent API Key'
    required: true
  api-secret:
    description: 'Confluent API Secret'
    required: true

runs:
  using: "composite"
  steps:
    - name: Validate schemas
      shell: bash
      run: |
        SCHEMA_DIR="${{ inputs.schema-dir }}"
        echo "üîç Validating schemas in $SCHEMA_DIR"
        for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
          if ! jq empty "$schema_file" &>/dev/null; then
            echo "‚ùå Invalid JSON in $schema_file"
            exit 1
          fi
        done
        echo "‚úÖ All schemas validated"

    - name: Deploy schemas
      shell: bash
      env:
        SCHEMA_REGISTRY_URL: ${{ inputs.registry-url }}
        API_KEY: ${{ inputs.api-key }}
        API_SECRET: ${{ inputs.api-secret }}
      run: |
        set -eo pipefail
        SCHEMA_DIR="${{ inputs.schema-dir }}"

        echo "üîê Validating API key permissions..."
        if ! curl -sS -u "${API_KEY}:${API_SECRET}" \
          "${SCHEMA_REGISTRY_URL}/mode" >/dev/null; then
          echo "‚ùå FATAL: API key authentication failed or lacks basic permissions"
          exit 1
        fi

        for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
          subject_name=$(basename "$schema_file" .avsc)
          echo "üöÄ Deploying schema: $subject_name"

          schema_content=$(jq -c . < "$schema_file")
          payload=$(jq -n --arg schema "$schema_content" \
            '{schema: $schema, schemaType: "AVRO"}')

          response=$(curl -sS -w "\n%{http_code}" \
            -u "${API_KEY}:${API_SECRET}" \
            -H "Content-Type: application/vnd.schemaregistry.v1+json" \
            -X POST \
            --data "$payload" \
            "${SCHEMA_REGISTRY_URL}/subjects/${subject_name}/versions" 2>&1) || true

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          case $http_code in
            200|201|202)
              echo "‚úÖ Success! New version: $(echo "$response_body" | jq .id)"
              ;;
            409)
              echo "‚ÑπÔ∏è Schema already exists for subject: $subject_name"
              latest=$(curl -sS -u "${API_KEY}:${API_SECRET}" \
                "${SCHEMA_REGISTRY_URL}/subjects/${subject_name}/versions/latest" \
                | jq -c .schema)

              if [ "$latest" = "$schema_content" ]; then
                echo "‚úÖ No changes. Schema is identical to latest version."
              else
                echo "üîÑ Schema differs. Attempting update..."
                update_resp=$(curl -sS -w "\n%{http_code}" \
                  -u "${API_KEY}:${API_SECRET}" \
                  -H "Content-Type: application/vnd.schemaregistry.v1+json" \
                  -X POST \
                  --data "$payload" \
                  "${SCHEMA_REGISTRY_URL}/subjects/${subject_name}/versions" 2>&1) || true
                update_code=$(echo "$update_resp" | tail -n1)
                update_body=$(echo "$update_resp" | head -n -1)

                if [ "$update_code" -eq 200 ] || [ "$update_code" -eq 201 ]; then
                  echo "‚úÖ Updated! New version: $(echo "$update_body" | jq .id)"
                else
                  if echo "$update_body" | grep -q "incompatible"; then
                    echo "‚ùå Compatibility check failed for subject: $subject_name"
                    echo "   üëâ Fix schema to be backward compatible OR relax registry compatibility settings."
                  else
                    echo "‚ùå Failed to update schema: $update_body"
                  fi
                  exit 1
                fi
              fi
              ;;
            401|403)
              echo "‚ùå PERMISSION DENIED: $response_body"
              echo "   Required permission: 'Write' on subject: $subject_name"
              exit 1
              ;;
            422)
              echo "‚ùå Compatibility failed: $subject_name"
              echo "$response_body"
              exit 1
              ;;
            *)
              echo "‚ùå Unexpected error ($http_code): $response_body"
              exit 1
              ;;
          esac
        done
