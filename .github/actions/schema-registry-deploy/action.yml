name: 'Deploy to Schema Registry'
description: 'Deploy Avro schemas to Confluent Schema Registry (non-prod + prod)'

inputs:
  # Non-prod
  registry-url:
    description: 'Confluent Schema Registry URL (non-prod)'
    required: false
  api-key:
    description: 'Confluent API Key (non-prod)'
    required: false
  api-secret:
    description: 'Confluent API Secret (non-prod)'
    required: false

  # Prod
  prod-registry-url:
    description: 'Confluent Schema Registry URL (prod)'
    required: false
  prod-api-key:
    description: 'Confluent API Key (prod)'
    required: false
  prod-api-secret:
    description: 'Confluent API Secret (prod)'
    required: false

runs:
  using: "composite"
  steps:
    - name: Deploy non-prod schemas
      shell: bash
      run: |
        set -eo pipefail
        SCHEMA_DIR="schemas"

        if [ -d "$SCHEMA_DIR" ]; then
          echo "üìÇ Found non-prod schemas in $SCHEMA_DIR"
          if [ -z "${{ inputs.registry-url }}" ] || [ -z "${{ inputs.api-key }}" ] || [ -z "${{ inputs.api-secret }}" ]; then
            echo "‚ùå Non-prod schemas detected but non-prod secrets are missing!"
            exit 1
          fi

          echo "üîê Validating API key permissions..."
          if ! curl -sS -u "${{ inputs.api-key }}:${{ inputs.api-secret }}" \
            "${{ inputs.registry-url }}/mode" >/dev/null; then
            echo "‚ùå FATAL: API key authentication failed or lacks basic permissions"
            exit 1
          fi

          echo "üîç Validating schemas in $SCHEMA_DIR"
          for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
            if ! jq empty "$schema_file" &>/dev/null; then
              echo "‚ùå Invalid JSON in $schema_file"
              exit 1
            fi
          done
          echo "‚úÖ All schemas validated"

          for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
            subject_name=$(basename "$schema_file" .avsc)
            echo "üöÄ Deploying schema: $subject_name"

            schema_content=$(jq -c . < "$schema_file")
            payload=$(jq -n --arg schema "$schema_content" \
              '{schema: $schema, schemaType: "AVRO"}')

            response=$(curl -sS -w "\n%{http_code}" \
              -u "${{ inputs.api-key }}:${{ inputs.api-secret }}" \
              -H "Content-Type: application/vnd.schemaregistry.v1+json" \
              -X POST \
              --data "$payload" \
              "${{ inputs.registry-url }}/subjects/${subject_name}/versions" 2>&1) || true

            http_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)

            case $http_code in
              200|201|202)
                echo "‚úÖ Success! New version: $(echo "$response_body" | jq .id)"
                ;;
              409)
                echo "‚ÑπÔ∏è Schema already exists for subject: $subject_name"
                latest=$(curl -sS -u "${{ inputs.api-key }}:${{ inputs.api-secret }}" \
                  "${{ inputs.registry-url }}/subjects/${subject_name}/versions/latest" \
                  | jq -c .schema)

                if [ "$latest" = "$schema_content" ]; then
                  echo "‚úÖ No changes. Schema is identical to latest version."
                else
                  echo "üîÑ Schema differs. Attempting update..."
                  update_resp=$(curl -sS -w "\n%{http_code}" \
                    -u "${{ inputs.api-key }}:${{ inputs.api-secret }}" \
                    -H "Content-Type: application/vnd.schemaregistry.v1+json" \
                    -X POST \
                    --data "$payload" \
                    "${{ inputs.registry-url }}/subjects/${subject_name}/versions" 2>&1) || true
                  update_code=$(echo "$update_resp" | tail -n1)
                  update_body=$(echo "$update_resp" | head -n -1)

                  if [ "$update_code" -eq 200 ] || [ "$update_code" -eq 201 ]; then
                    echo "‚úÖ Updated! New version: $(echo "$update_body" | jq .id)"
                  else
                    if echo "$update_body" | grep -q "incompatible"; then
                      echo "‚ùå Compatibility check failed for subject: $subject_name"
                      echo "   üëâ Fix schema to be backward compatible OR relax registry compatibility settings."
                    else
                      echo "‚ùå Failed to update schema: $update_body"
                    fi
                    exit 1
                  fi
                fi
                ;;
              401|403)
                echo "‚ùå PERMISSION DENIED: $response_body"
                exit 1
                ;;
              422)
                echo "‚ùå Compatibility failed: $subject_name"
                echo "$response_body"
                exit 1
                ;;
              *)
                echo "‚ùå Unexpected error ($http_code): $response_body"
                exit 1
                ;;
            esac
          done
        else
          echo "‚ÑπÔ∏è No non-prod schemas found. Skipping..."
        fi

    - name: Deploy prod schemas
      shell: bash
      run: |
        set -eo pipefail
        SCHEMA_DIR="Prod-Schema"

        if [ -d "$SCHEMA_DIR" ]; then
          echo "üìÇ Found PROD schemas in $SCHEMA_DIR"
          if [ -z "${{ inputs.prod-registry-url }}" ] || [ -z "${{ inputs.prod-api-key }}" ] || [ -z "${{ inputs.prod-api-secret }}" ]; then
            echo "‚ùå Prod schemas detected but prod secrets are missing!"
            exit 1
          fi

          echo "üîê Validating API key permissions..."
          if ! curl -sS -u "${{ inputs.prod-api-key }}:${{ inputs.prod-api-secret }}" \
            "${{ inputs.prod-registry-url }}/mode" >/dev/null; then
            echo "‚ùå FATAL: API key authentication failed or lacks basic permissions"
            exit 1
          fi

          echo "üîç Validating schemas in $SCHEMA_DIR"
          for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
            if ! jq empty "$schema_file" &>/dev/null; then
              echo "‚ùå Invalid JSON in $schema_file"
              exit 1
            fi
          done
          echo "‚úÖ All schemas validated"

          for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
            subject_name=$(basename "$schema_file" .avsc)
            echo "üöÄ Deploying schema: $subject_name"

            schema_content=$(jq -c . < "$schema_file")
            payload=$(jq -n --arg schema "$schema_content" \
              '{schema: $schema, schemaType: "AVRO"}')

            response=$(curl -sS -w "\n%{http_code}" \
              -u "${{ inputs.prod-api-key }}:${{ inputs.prod-api-secret }}" \
              -H "Content-Type: application/vnd.schemaregistry.v1+json" \
              -X POST \
              --data "$payload" \
              "${{ inputs.prod-registry-url }}/subjects/${subject_name}/versions" 2>&1) || true

            http_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)

            case $http_code in
              200|201|202)
                echo "‚úÖ Success! New version: $(echo "$response_body" | jq .id)"
                ;;
              409)
                echo "‚ÑπÔ∏è Schema already exists for subject: $subject_name"
                latest=$(curl -sS -u "${{ inputs.prod-api-key }}:${{ inputs.prod-api-secret }}" \
                  "${{ inputs.prod-registry-url }}/subjects/${subject_name}/versions/latest" \
                  | jq -c .schema)

                if [ "$latest" = "$schema_content" ]; then
                  echo "‚úÖ No changes. Schema is identical to latest version."
                else
                  echo "üîÑ Schema differs. Attempting update..."
                  update_resp=$(curl -sS -w "\n%{http_code}" \
                    -u "${{ inputs.prod-api-key }}:${{ inputs.prod-api-secret }}" \
                    -H "Content-Type: application/vnd.schemaregistry.v1+json" \
                    -X POST \
                    --data "$payload" \
                    "${{ inputs.prod-registry-url }}/subjects/${subject_name}/versions" 2>&1) || true
                  update_code=$(echo "$update_resp" | tail -n1)
                  update_body=$(echo "$update_resp" | head -n -1)

                  if [ "$update_code" -eq 200 ] || [ "$update_code" -eq 201 ]; then
                    echo "‚úÖ Updated! New version: $(echo "$update_body" | jq .id)"
                  else
                    if echo "$update_body" | grep -q "incompatible"; then
                      echo "‚ùå Compatibility check failed for subject: $subject_name"
                      echo "   üëâ Fix schema to be backward compatible OR relax registry compatibility settings."
                    else
                      echo "‚ùå Failed to update schema: $update_body"
                    fi
                    exit 1
                  fi
                fi
                ;;
              401|403)
                echo "‚ùå PERMISSION DENIED: $response_body"
                exit 1
                ;;
              422)
                echo "‚ùå Compatibility failed: $subject_name"
                echo "$response_body"
                exit 1
                ;;
              *)
                echo "‚ùå Unexpected error ($http_code): $response_body"
                exit 1
                ;;
            esac
          done
        else
          echo "‚ÑπÔ∏è No prod schemas found. Skipping..."
        fi
