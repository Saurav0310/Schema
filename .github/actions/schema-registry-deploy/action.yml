name: 'Deploy to Schema Registry'
description: 'Deploy Avro schemas to a Confluent Schema Registry environment'

inputs:
  registry-url:
    description: 'Confluent Schema Registry URL'
    required: true
  api-key:
    description: 'Confluent API Key'
    required: true
  api-secret:
    description: 'Confluent API Secret'
    required: true
  schema-dir:
    description: 'Directory containing schemas'
    required: true

runs:
  using: "composite"
  steps:
    - name: Deploy schemas
      shell: bash
      run: |
        set -eo pipefail

        SCHEMA_DIR="${{ inputs.schema-dir }}"
        URL="${{ inputs.registry-url }}"
        KEY="${{ inputs.api-key }}"
        SECRET="${{ inputs.api-secret }}"

        if [ ! -d "$SCHEMA_DIR" ]; then
          echo "‚ÑπÔ∏è No schemas found in $SCHEMA_DIR. Skipping..."
          exit 0
        fi

        echo "üìÇ Found schemas in $SCHEMA_DIR"
        echo "üîê Validating API key..."
        if ! curl -sS -u "$KEY:$SECRET" "$URL/mode" >/dev/null; then
          echo "‚ùå Authentication failed"
          exit 1
        fi

        echo "üîç Validating schemas..."
        for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
          if ! jq empty "$schema_file" &>/dev/null; then
            echo "‚ùå Invalid JSON in $schema_file"
            exit 1
          fi
        done
        echo "‚úÖ All schemas validated"

        for schema_file in $(find "$SCHEMA_DIR" -name '*.avsc'); do
          subject_name=$(basename "$schema_file" .avsc)
          echo "üöÄ Processing schema: $subject_name"

          schema_content=$(jq -c . < "$schema_file")

          # Fetch latest schema from registry (if exists)
          latest_schema=$(curl -sS -u "$KEY:$SECRET" \
            "$URL/subjects/${subject_name}/versions/latest" \
            | jq -r .schema 2>/dev/null || echo "")

          if [ "$latest_schema" = "$schema_content" ]; then
            echo "‚úÖ No changes for $subject_name. Skipping..."
            continue
          fi

          echo "üîÑ Schema differs (or new). Registering new version..."
          payload=$(jq -n --arg schema "$schema_content" '{schema: $schema, schemaType: "AVRO"}')

          response=$(curl -sS -w "\n%{http_code}" \
            -u "$KEY:$SECRET" \
            -H "Content-Type: application/vnd.schemaregistry.v1+json" \
            -X POST \
            --data "$payload" \
            "$URL/subjects/${subject_name}/versions" 2>&1) || true

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          case $http_code in
            200|201)
              echo "‚úÖ Success! New version: $(echo "$response_body" | jq .id)"
              ;;
            409)
              echo "‚ùå Compatibility check failed for $subject_name"
              echo "   üëâ Fix schema to be backward compatible OR relax registry compatibility settings."
              exit 1
              ;;
            401|403)
              echo "‚ùå PERMISSION DENIED: $response_body"
              exit 1
              ;;
            422)
              echo "‚ùå Invalid schema for $subject_name"
              echo "$response_body"
              exit 1
              ;;
            *)
              echo "‚ùå Unexpected error ($http_code): $response_body"
              exit 1
              ;;
          esac
        done
